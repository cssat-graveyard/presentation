ylab("") +
xlab(names(dat)[1])
}
aa <- data.frame(housig=c("yes", "no"), resp=c(.1,.5), wt=c(.4,.6))
bb <- data.frame(housig=c("a", "b", "c"), resp=c(.2,.3, .4), wt=c(.4,.2,.2))
plotBinResp(aa)
plotBinResp(bb)
plotBinResp <- function(dat) {
u <- 0.1
mx <- ceiling(max(dat[,2], dat[,3])/u)*u
if(is.na(mx)) mx=1
mxstep <- round(ceiling(mx/u)*u/3,1)
dat$labels <- factor(levels(dat[ ,1]), ordered = T)
my_color_scale <- c("weight" = "green", "response" = "red")
ggplot(dat, aes_string(x = "labels", y=names(dat)[3])) +
theme_bw(14) +
geom_bar(fill = my_color_scale["weight"], stat = "identity") +
geom_point(aes_string(y = names(dat)[2]), fill = "red", color = "red") +
geom_line(aes_string(y = names(dat)[2]), group = 1, color = my_color_scale["response"]) +
theme(legend.text = element_text(size = 12), legend.position="top",
legend.box="horizontal", legend.key.size = unit(0.3, "cm")) +
#scale_fill_manual("", values= "green") +
scale_y_continuous(breaks = seq(0, mx, mxstep)) +
ylab("") +
xlab(names(dat)[1])
}
aa <- data.frame(housig=c("yes", "no"), resp=c(.1,.5), wt=c(.4,.6))
bb <- data.frame(housig=c("a", "b", "c"), resp=c(.2,.3, .4), wt=c(.4,.2,.2))
plotBinResp(aa)
plotBinResp(bb)
plotBinResp <- function(dat) {
u <- 0.1
mx <- ceiling(max(dat[,2], dat[,3])/u)*u
if(is.na(mx)) mx=1
mxstep <- round(ceiling(mx/u)*u/3,1)
dat$labels <- factor(levels(dat[ ,1]), ordered = T)
my_color_scale <- c("weight" = "green", "response" = "red")
ggplot(dat, aes_string(x = "labels", y=names(dat)[3])) +
theme_bw(14) +
geom_bar(fill = my_color_scale["weight"], stat = "identity") +
geom_point(aes_string(y = names(dat)[2]), fill = "red", color = "red") +
geom_line(aes_string(y = names(dat)[2]), group = 1, color = my_color_scale["response"]) +
theme(legend.text = element_text(size = 12), legend.position="top",
legend.box="horizontal", legend.key.size = unit(0.3, "cm")) +
scale_fill_manual("", values= "green") +
scale_y_continuous(breaks = seq(0, mx, mxstep)) +
ylab("") +
xlab(names(dat)[1])
}
aa <- data.frame(housig=c("yes", "no"), resp=c(.1,.5), wt=c(.4,.6))
bb <- data.frame(housig=c("a", "b", "c"), resp=c(.2,.3, .4), wt=c(.4,.2,.2))
plotBinResp(aa)
plotBinResp(bb)
plotBinResp <- function(dat) {
u <- 0.1
mx <- ceiling(max(dat[,2], dat[,3])/u)*u
if(is.na(mx)) mx=1
mxstep <- round(ceiling(mx/u)*u/3,1)
dat$labels <- factor(levels(dat[ ,1]), ordered = T)
my_color_scale <- c("weight" = "green", "response" = "red")
ggplot(dat, aes_string(x = "labels", y=names(dat)[3])) +
theme_bw(14) +
geom_bar(fill = my_color_scale["weight"], stat = "identity") +
geom_point(aes_string(y = names(dat)[2]), fill = "red", color = "red") +
geom_line(aes_string(y = names(dat)[2]), group = 1, color = my_color_scale["response"]) +
theme(legend.text = element_text(size = 12), legend.position="top",
legend.box="horizontal", legend.key.size = unit(0.3, "cm")) +
scale_y_continuous(breaks = seq(0, mx, mxstep)) +
ylab("") +
xlab(names(dat)[1])
}
aa <- data.frame(housig=c("yes", "no"), resp=c(.1,.5), wt=c(.4,.6))
bb <- data.frame(housig=c("a", "b", "c"), resp=c(.2,.3, .4), wt=c(.4,.2,.2))
plotBinResp(aa)
plotBinResp(bb)
match("a", c("c", "a"))
?loess
x <- rnorm(10)
y <- rnorm(10)
plot(x, y)
plot(loess(y ~ x, degree = 1))
plot(loess(y ~ x, degree = 1), type = "l")
ll <- loess(y ~ x, degree= 1)
plot(x, y)
lines(predict(ll, newdata = data.frame(x = seq(-1, 1, length = 100))))
?as.ts
obs<-rnorm(20)
d<-data.frame(obs=obs,pred=obs+rnorm(20,.1))
d$pup=d$pred+.5
d$plow=d$pred-.5
d$obs[20]<-NA
d
install.packages(c("bbmle", "dplyr", "GGally", "ggplot2", "gtools", "knitr", "maps", "maptools", "mstate", "Rcpp", "rgeos", "rjson", "sas7bdat", "timereg", "VGAM"))
a <- c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,1,1,1,2)
b <- c('A','B','C','D','A','A','B','C','B','B','C','C','C','D','D','A','A','B','C','D')
df <- data.frame(a, b)
names(df) <- c("location", "event")
df$location <- factor(df$location)
ggplot(df, aes(x = event, fill = location)) + geom_bar()
library(ggplot2)
ggplot(df, aes(x = event, fill = location)) + geom_bar()
ggplot(df, aes(x = location, fill = event)) + geom_bar() + geom_text(aes(y = ..count..))
ggplot(df, aes(x = event, fill = location)) + geom_bar()
library(dplyr)
ggplot(df, aes(x = location, fill = event)) + geom_bar()
df %.% group_by(location) %.% summarize(total = n())
totes <- df %.% group_by(location) %.% summarize(total = n())
class(totes$location)
ggplot(df, aes(x = location, fill = event)) + geom_bar() +
geom_text(data = totes, mapping = aes(x = location, y = total, label = total))
ggplot(df, aes(x = location, fill = event)) + geom_bar() +
geom_text(data = totes, mapping = aes(x = location, y = total, label = total), fill = "black")
df
ggplot(df, aes(x = location, fill = event)) + geom_bar()
ggplot(df, aes(x = location)) + geom_bar(aes(fill = event)) +
geom_text(data = totes, mapping = aes(x = location, y = total, label = total), fill = "black")
ggplot(df, aes(x = location)) + geom_bar(aes(fill = event)) +
geom_text(data = totes,
mapping = aes(x = location, y = total, label = total))
ggplot(df, aes(x = location)) + geom_bar(aes(fill = event)) +
geom_text(data = totes,
mapping = aes(y = total, label = total))
ggplot(df, aes(x = location)) + geom_bar(aes(fill = event)) +
geom_text(data = totes,
mapping = aes(y = total, label = total + 0.2))
ggplot(df, aes(x = location)) + geom_bar(aes(fill = event)) +
geom_text(data = totes,
mapping = aes(y = total + .2, label = total))
ggplot(df, aes(x = location, color = event, y = ..count..)) + geom_line()
ggplot(df, aes(x = location, color = event, group = event)) + geom_line(aes(y = ..count..))
df.counts <- df %.% group_by(location, event) %.% summarize(n = n())
df.counts
ggplot(df.counts, aes(x = location, y = n, color = event)) + geom_line()
ggplot(df.counts, aes(x = location, y = n, color = event, group = event)) + geom_line()
totes
ggplot(totes, aes(x = location, y = total)) +
geom_line(size = 2) +
geom_line(data = df.counts, aes(y = n, color = event, group = event))
ggplot(totes, aes(x = location, y = total)) +
geom_line(size = 2, group = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event))
ggplot(totes, aes(x = location, y = total)) +
geom_line(size = 2, group = 1)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 2)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 2) +
geom_line(data = df.counts, aes(y = n, color = event, group = event))
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event))
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event)) +
expand_limits(y = 0)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event)) +
expand_limits(y = 0)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event)) +
expand_limits(y = 0) +
annotate(geom = "text", x = 2, y = 6, label = "Total")
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event)) +
expand_limits(y = 0) +
annotate(geom = "text", x = 2, y = 6, label = "Total", size = 12)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event)) +
expand_limits(y = 0) +
annotate(geom = "text", x = 2, y = 6, label = "Total", size = 10)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event), size = 0.9) +
expand_limits(y = 0) +
annotate(geom = "text", x = 2, y = 6, label = "Total", size = 10)
a <- c(1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,1,1,1,2)
b <- c('A','B','C','D','A','A','B','C','B','B','C','C','C','D','D','A','A','B','C','D')
df <- data.frame(a, b)
names(df) <- c("location", "event")
df$location <- factor(df$location)
library(ggplot2)
library(dplyr)
totes <- df %.% group_by(location) %.% summarize(total = n())
df.counts <- df %.% group_by(location, event) %.% summarize(n = n())
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event), size = 0.9) +
expand_limits(y = 0) +
annotate(geom = "text", x = 2, y = 6, label = "Total", size = 10)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event), size = 0.9, position = "jitter") +
expand_limits(y = 0) +
annotate(geom = "text", x = 2, y = 6, label = "Total", size = 10)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event), size = 0.9,
position = position_jitter(w = 0.05, h = 0.05)) +
expand_limits(y = 0) +
annotate(geom = "text", x = 2, y = 6, label = "Total", size = 10)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event), size = 0.9,
position = position_jitter(w = 0.1, h = 0.1)) +
expand_limits(y = 0) +
annotate(geom = "text", x = 2, y = 6, label = "Total", size = 10)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event), size = 0.9,
position = position_jitter(w = 0, h = 0.1)) +
expand_limits(y = 0) +
annotate(geom = "text", x = 2, y = 6, label = "Total", size = 10)
ggplot(totes, aes(x = location, y = total)) +
geom_line(aes(group = 1), size = 1) +
geom_line(data = df.counts, aes(y = n, color = event, group = event), size = 0.9,
position = position_jitter(w = 0.05, h = 0.1)) +
expand_limits(y = 0) +
annotate(geom = "text", x = 2, y = 6, label = "Total", size = 10)
library(pocr)
library(dplyr)
portal_db <- "test"
save_path <- c("S:/Data Portal/dashboard") # for output
sqlserv <- odbcConnect("POC")
rlc <- sqlQuery(sqlserv, "select * from dbo.ref_lookup_county_region")
trends.base <- expand.grid(county_cd = 0:39,
month = seq.Date(as.Date("2000-01-01"), as.Date("2014-04-01"),
by = "quarter"))
prtl <- odbcConnect(ifelse(portal_db == "test", "test_annie", "annie"))
ent.cnt <- sqlQuery(prtl,
sprintf("call sp_ooh_flow_entries_counts('0','0','0','0','0','0','%s','0','0','0','0','0','0','0','0','0', '0')",
paste(0:39, collapse = ",")))
names(ent.cnt) <- tolower(make.names(names(ent.cnt)))
ent.cnt <- ent.cnt %.% filter(date_type == 1
& qry_type_poc1 == 2) %.%
mutate(month = as.Date(month)) %.%
select(entry.cnt = number.of.entries, month, county_cd)
trends.base <- expand.grid(county_cd = 0:39,
month = seq.Date(as.Date("2000-01-01"), as.Date("2014-04-01"),
by = "quarter"))
prtl <- odbcConnect(ifelse(portal_db == "test", "test_annie", "annie"))
ent.cnt <- sqlQuery(prtl,
sprintf("call sp_ooh_flow_entries_counts('0','0','0','0','0','0','%s','0','0','0','0','0','0','0','0','0', '0')",
paste(0:39, collapse = ",")))
names(ent.cnt) <- tolower(make.names(names(ent.cnt)))
names(ent.cnt)
class(ent.cnt$cohort.period)
ent.cnt <- ent.cnt %.% filter(date_type == 1
& qry_type_poc1 == 2) %.%
mutate(month = as.Date(cohort.period)) %.%
select(entry.cnt = number.of.entries, month, county_cd)
ent.rate <- sqlQuery(prtl,
sprintf("call sp_ooh_flow_entries_rates('0','0','0','0','0','0','%s','0','0','0','0','0','0','0','0','0', '0')",
paste(0:39, collapse = ",")))
names(ent.rate) <- tolower(make.names(names(ent.rate)))
ent.rate <- ent.rate %.% filter(date_type == 1
& qry_type_poc1 == 2) %.%
mutate(month = as.Date(cohort.period)) %.%
select(entry.rate = rate.of.entries, month, county_cd)
ent.04 <- sqlQuery(prtl,
sprintf("call sp_ooh_flow_entries_counts('0','1','0','0','0','0','%s','0','0','0','0','0','0','0','0','0','0')",
paste(0:39, collapse = ",")))
names(ent.04) <- tolower(make.names(names(ent.04)))
ent.04 <- ent.04 %.% filter(date_type == 1
& qry_type_poc1 == 2) %.%
mutate(month = as.Date(cohort.period)) %.%
select(entry.cnt.04 = number.of.entries, month, county_cd)
ent.dep <- sqlQuery(prtl,
sprintf("call sp_ooh_flow_entries_counts('0','0','0','0','0','0','%s','0','0','0','0','0','0','0','0','0','2')",
paste(0:39, collapse = ",")))
names(ent.dep) <- tolower(make.names(names(ent.dep)))
ent.dep <- ent.dep %.% filter(date_type == 1
& qry_type_poc1 == 2) %.%
mutate(month = as.Date(cohort.period)) %.%
select(entry.cnt.dep = number.of.entries, month, county_cd)
pit.kc <- sqlQuery(prtl,
sprintf("call sp_ooh_wb_familysettings('0','0','0','0','0','0','%s','0','0','0','0','0','0','0','0','0','0')",
paste(0:39, collapse = ",")))
names(pit.kc) <- tolower(make.names(names(pit.kc)))
names(pit.kc)
pit.kc <- pit.kc %.% filter(qry_type_poc1_first_all == 2) %.%
mutate(month = as.Date(year)) %.%
select(pit.kin = family.setting..kin.placement., month, county_cd) %.%
mutate(year = as.integer(year(month)))
head(ent.o4)
head(ent.04)
head(ent.dep)
head(ent.rate)
pit.cnt <- sqlQuery(prtl,
sprintf("call sp_ooh_pit_counts('0','0','0','0','0','0','%s','0','0','0','0','0','0','0','0','0', '0')",
paste(0:39, collapse = ",")))
names(pit.cnt) <- tolower(make.names(names(pit.cnt)))
names(pit.cnt)
pit.cnt <- pit.cnt %.% filter(date_type == 1
& qry_type_first_all == 2) %.%
mutate(month = as.Date(date)) %.%
select(pit.count = total.in.care.first.day, month, county_cd)
pit.cnt <- pit.cnt %.% filter(date_type == 1
& qry_type_first_all == 2) %.%
mutate(month = as.Date(date)) %.%
select(pit.count = total.in.out.of.home.care.1st.first.day, month, county_cd)
pit.cnt <- pit.cnt %.% filter(date_type == 1
& qry_type_first_all == 2) %.%
mutate(month = as.Date(date)) %.%
select(pit.count = total.in.out.of.home.care.1st.day, month, county_cd)
pit.sibs <- sqlQuery(prtl,
sprintf("call sp_ooh_wb_siblings_uncensored('0','0','0','0', '0', '%s','0','0','0','0','0','0','0','0','0', '0')",
paste(0:39, collapse = ",")))
names(pit.sibs) <- tolower(make.names(names(pit.sibs)))
names(pit.sibs)
pit.sibs <- pit.sibs %.% filter(qry_type_poc1_first_all == 2
& bin_sibling_group_size == 0
& placement.type == "All Out-of-Home Care") %.%
mutate(any.together = some_together + all_together) %.%
select(pit.sib.pct = any.together,
n.sibs = number.in.cohort,
year,
county_cd)
trends <- trends.base %.%
mutate(year = ifelse(month(month) == 1, as.integer(year(month)), NA)) %.%
left_join(ent.cnt) %.%
left_join(ent.rate) %.%
left_join(ent.04) %.%
left_join(ent.dep) %.%
left_join(pit.kc) %.%
left_join(pit.cnt) %.%
left_join(pit.sibs) %.%
left_join(rlc %.% select(-old_region_cd)) %.%
mutate(entry.pct.04 = entry.cnt.04 / entry.cnt,
entry.pct.dep = entry.cnt.dep / entry.cnt,
pit.sib.pct = pit.sib.pct / 100,
pit.kin = pit.kin / 100)
trends$agg.ent.dep[trends$year < 2003] <- NA
trends.county <- trends %.% filter(county_cd > 0) %.%
mutate(county_small_cd = ifelse(small_fl == 1, -1, county_cd),
county_small_tx = ifelse(small_fl == 1, "small", county)) %.%
group_by(county_small_cd, year) %.%
mutate(agg.ent.rate = weighted.mean(x = mean(entry.rate, na.rm = T),
w = sum(entry.cnt, na.rm = T), na.rm = T),
agg.ent.04   = sum(entry.cnt.04, na.rm = T) / sum(entry.cnt, na.rm = T),
agg.ent.dep  = sum(entry.cnt.dep, na.rm = T) / sum(entry.cnt, na.rm = T),
agg.kin      = weighted.mean(mean(pit.kin, na.rm = T), w = sum(pit.count, na.rm = T), na.rm = T),
agg.sibs     = weighted.mean(pit.sib.pct, w = n.sibs, na.rm = T)) %.%
ungroup() %.%
filter(!is.na(year)) %.%
mutate(agg.ent.dep = ifelse(year < 2003, NA, agg.ent.dep)) %.%
select(county, month, agg.ent.rate, agg.ent.04, agg.ent.dep, agg.kin, agg.sibs)
names(trends.county)[3:7] <- paste0("trend_", 0:4)
head(trends.county)
write.csv(trends.county, file = paste0(save_path, "/trends.csv"), row.names = F)
trends.region <- trends %.%
mutate(region_6_tx = as.character(region_6_tx)) %.%
filter(county_cd > 0) %.%
group_by(region_6_tx, month) %.%
summarize(agg.ent.rate = weighted.mean(x = entry.rate, w = entry.cnt, na.rm = T),
agg.ent.04   = sum(entry.cnt.04, na.rm = T) / sum(entry.cnt, na.rm = T),
agg.ent.dep  = sum(entry.cnt.dep, na.rm = T) / sum(entry.cnt, na.rm = T),
agg.kin      = weighted.mean(pit.kin, w = pit.count, na.rm = T),
agg.sibs     = weighted.mean(pit.sib.pct, w = n.sibs, na.rm = T)) %.%
select(region_6_tx, month,
agg.ent.rate, agg.ent.04, agg.ent.dep, agg.kin, agg.sibs) %.%
mutate(agg.ent.dep = ifelse(year(month) < 2003, NA, agg.ent.dep))
names(trends.region) <- c("id", "time", paste0("trend_", 0:4))
trends.state <- trends %.% filter(county_cd == 0) %.%
group_by(month) %.%
summarize(agg.ent.rate = weighted.mean(x = entry.rate, w = entry.cnt, na.rm = T),
agg.ent.04   = sum(entry.cnt.04, na.rm = T) / sum(entry.cnt, na.rm = T),
agg.ent.dep  = sum(entry.cnt.dep, na.rm = T) / sum(entry.cnt, na.rm = T),
agg.kin      = weighted.mean(pit.kin, w = pit.count, na.rm = T),
agg.sibs     = weighted.mean(pit.sib.pct, w = n.sibs, na.rm = T)) %.%
mutate(region_6_tx = "Washington") %.%
select(region_6_tx, month,
agg.ent.rate, agg.ent.04, agg.ent.dep, agg.kin, agg.sibs) %.%
mutate(agg.ent.dep = ifelse(year(month) < 2003, NA, agg.ent.dep))
names(trends.state) <- c("id", "time", paste0("trend_", 0:4))
trends.region <- rbind(trends.region, trends.state)
samp(trends.region)
samp(trends.region)
samp(trends.region)
samp(trends.region)
samp(trends.county)
samp(trends.county)
samp(trends.county)
samp(trends.county)
trends.region <- trends %.%
mutate(region_6_tx = as.character(region_6_tx)) %.%
filter(county_cd > 0) %.%
group_by(region_6_tx, month) %.%
summarize(agg.ent.rate = weighted.mean(x = entry.rate, w = entry.cnt, na.rm = T),
agg.ent.04   = sum(entry.cnt.04, na.rm = T) / sum(entry.cnt, na.rm = T),
agg.ent.dep  = sum(entry.cnt.dep, na.rm = T) / sum(entry.cnt, na.rm = T),
agg.kin      = weighted.mean(pit.kin, w = pit.count, na.rm = T),
agg.sibs     = weighted.mean(pit.sib.pct, w = n.sibs, na.rm = T)) %.%
select(region_6_tx, month,
agg.ent.rate, agg.ent.04, agg.ent.dep, agg.kin, agg.sibs) %.%
mutate(agg.ent.dep = ifelse(year(month) < 2003, NA, agg.ent.dep))
samp(trendw.region)
samp(trends.region)
names(trends.region) <- c("id", "time", paste0("trend_", 0:4))
trends.state <- trends %.% filter(county_cd == 0) %.%
group_by(month) %.%
summarize(agg.ent.rate = weighted.mean(x = entry.rate, w = entry.cnt, na.rm = T),
agg.ent.04   = sum(entry.cnt.04, na.rm = T) / sum(entry.cnt, na.rm = T),
agg.ent.dep  = sum(entry.cnt.dep, na.rm = T) / sum(entry.cnt, na.rm = T),
agg.kin      = weighted.mean(pit.kin, w = pit.count, na.rm = T),
agg.sibs     = weighted.mean(pit.sib.pct, w = n.sibs, na.rm = T)) %.%
mutate(region_6_tx = "Washington") %.%
select(region_6_tx, month,
agg.ent.rate, agg.ent.04, agg.ent.dep, agg.kin, agg.sibs) %.%
mutate(agg.ent.dep = ifelse(year(month) < 2003, NA, agg.ent.dep))
names(trends.state) <- c("id", "time", paste0("trend_", 0:4))
trends.region <- rbind(trends.region, trends.state)
for (i in 3:ncol(trends.region)) trends.region[!is.finite(trends.region[, i]), i] <- NA
samp(trends.region)
write.csv(trends.region, file = paste0(save_path, "/trends_region.csv"), row.names = F)
?NROW
dim(x)
x <- 1:3
dim(x)
replicate(n = 10, expr = {matrix(rnorn(4), nrow = 2)})
replicate(n = 10, expr = {matrix(rnorm(4), nrow = 2)})
a <- replicate(n = 10, expr = {matrix(rnorm(4), nrow = 2)})
dim(a)
class(a)
?svg
capabilities()["cairo"]
ggsave("entry-rate-by-age.pdf", ent1, width = 8, height = 6)
library(pocr)
require(rCharts)
require(ggplot2)
require(dplyr)
require(RODBC)
require(lubridate)
require(extrafont)
setwd("C:/Users/gregorp.NEBULA2/Desktop/GitHub/presentation/R")
con_test <- odbcConnect("test_annie")
loadfonts()
sel.date.type <- 2
min.date <- as.Date(ymd('2006-01-01'))
sel.qry.type <- 0
sel.font <- "Frutiger LT Std 45 Light"
bo.ramp <- colorRampPalette(colors = portal_colors[c(4, 8)],
space = "Lab", bias = 1,
interpolate = "linear")
col7 <- c("#7A4237",
"#895267",
"#727192",
"#44919C",
"#51A981",
"#9DB65B",
"#F2B45B")
format_sp <- function(x, date = T) {
names(x) <- tolower(names(x))
names(x) <- str_replace_all(names(x), " ", ".")
names(x) <- str_replace_all(names(x), "/", ".")
names(x) <- str_replace_all(names(x), "_", ".")
names(x) <- str_replace_all(names(x), "-", ".")
if (date) {
to.change <- which(sapply(x, is.POSIXct))
for (i in to.change) {
x[, i] <- as.Date(x[, i])
}
}
return(x)
}
entries <- list()
entries$by.age <- sqlQuery(con_test,
"
call test_annie.sp_ooh_flow_entries_rates('2000-01-01,2014-01-01',
'1,2,3,4' ,--  @age_grouping_cd =
'0', -- race_cd =
'0',--  @gender_cd =
'0',--  @init_cd_plcm_setg =
'0',--  @long_cd_plcm_setg =
'0',--  county_cd
'0',--  @bin_los_cd
'0',--  @bin_placemet_cd =
'0',--  @bin_ihs_svc_cd =
'0',--  @cd_reporter_type =
'0',--  @filter_access_type =
'0',--  @filter_allegation =
'0',--  @filter_findig =
'0',--  @filter_service_category =
'0',--  @filter_service_budget
'0'); -- bin_dep_cd
") %>%
format_sp() %>%
filter(date.type == sel.date.type,
qry.type.poc1 == sel.qry.type,
cohort.period > min.date) %>%
select(cohort.period, age.grouping.cd, age.grouping, rate.of.entries)
entries$by.age$age.grouping <- reorder(entries$by.age$age.grouping, X = entries$by.age$age.grouping.cd)
ent1 <- ggplot(entries$by.age, aes(x = cohort.period, y = rate.of.entries, color = age.grouping)) +
geom_line(size = 1) +
scale_color_manual(values = portal_colors[c(1, 4, 5, 8)]) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 8)) +
#scale_y_continuous(trans = "log") +
labs(x = "Entry Quarter",
y  = "Rate of Entries (per 1,000 population)",
title = "WA Entries into Out-of-Home Care by Age",
color = "Age Group") +
theme_bw(base_family = sel.font)
ggsave("entry-rate-by-age.pdf", ent1, width = 8, height = 6)
Sys.getenv("R_GSCMD")
sessionInfo()
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.02/bin/gswin64c.exe")
Sys.getenv("R_GSCMD")
Sys.getenv("R_GSCMD")
Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.02/bin/gswin64c.exe")
